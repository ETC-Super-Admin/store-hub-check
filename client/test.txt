#data/inventory.ts:
import type { Inventory } from "@/types";

export const inventoryItems: Inventory[] = [
    {
        id: 1,
        date: "15/08/2025",
        sku: "SKU001",
        productName: "iPhone 15 Pro",
        qty: 50,
        updatedQty: 48,
        difference: -2,
        status: "in_stock",
        note: "Customer purchase",
        staff: "Alice",
    },
    {
        id: 2,
        date: "15/08/2025",
        sku: "SKU002",
        productName: "Samsung Galaxy S24",
        qty: 30,
        updatedQty: 28,
        difference: -2,
        status: "in_stock",
        note: "Warehouse transfer",
        staff: "Bob",
    },
    ...
];

#types/index.ts:
import { SVGProps } from "react";
import type { ChipProps } from "@heroui/react";

export type IconSvgProps = SVGProps<SVGSVGElement> & {
  size?: number;
};

export interface Inventory {
  id: number;
  date: string;
  sku: string;
  productName: string;
  qty: number;
  updatedQty: number;
  difference: number;
  status: string;
  note: string;
  staff: string;
}

export interface Column {
  name: string;
  uid: string;
  sortable?: boolean;
}

export interface StatusOption {
  name: string;
  uid: string;
}

export type StatusColorMap = Record<string, ChipProps["color"]>;

#hooks/useInventoryTable.ts:
import React from "react";
import type { Selection, SortDescriptor } from "@heroui/react";
import type { Inventory } from "@/types";
import { inventoryItems } from "@/data/inventory";
import { columns, statusOptions, INITIAL_VISIBLE_COLUMNS } from "@/constants/inventoryTable";

export function useInventoryTable() {
    const [filterValue, setFilterValue] = React.useState("");
    const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([]));
    const [visibleColumns, setVisibleColumns] = React.useState<Selection>(
        new Set(INITIAL_VISIBLE_COLUMNS)
    );
    const [statusFilter, setStatusFilter] = React.useState<Selection>("all");
    const [rowsPerPage, setRowsPerPage] = React.useState(5);
    const [sortDescriptor, setSortDescriptor] = React.useState<SortDescriptor>({
        column: "date",
        direction: "ascending",
    });
    const [page, setPage] = React.useState(1);

    const hasSearchFilter = Boolean(filterValue);

    const headerColumns = React.useMemo(() => {
        if (visibleColumns === "all") return columns;
        return columns.filter((column) =>
            Array.from(visibleColumns).includes(column.uid)
        );
    }, [visibleColumns]);

    const filteredItems = React.useMemo(() => {
        let filteredUsers = [...inventoryItems];

        if (hasSearchFilter) {
            filteredUsers = filteredUsers.filter((user) =>
                user.productName.toLowerCase().includes(filterValue.toLowerCase())
            );
        }
        if (
            statusFilter !== "all" &&
            Array.from(statusFilter).length !== statusOptions.length
        ) {
            filteredUsers = filteredUsers.filter((user) =>
                Array.from(statusFilter).includes(user.status)
            );
        }

        return filteredUsers;
    }, [filterValue, statusFilter, hasSearchFilter]);

    const pages = Math.ceil(filteredItems.length / rowsPerPage) || 1;

    const items = React.useMemo(() => {
        const start = (page - 1) * rowsPerPage;
        const end = start + rowsPerPage;
        return filteredItems.slice(start, end);
    }, [page, filteredItems, rowsPerPage]);

    const sortedItems = React.useMemo(() => {
        return [...items].sort((a: Inventory, b: Inventory) => {
            const first = a[sortDescriptor.column as keyof Inventory] as number;
            const second = b[sortDescriptor.column as keyof Inventory] as number;
            const cmp = first < second ? -1 : first > second ? 1 : 0;
            return sortDescriptor.direction === "descending" ? -cmp : cmp;
        });
    }, [sortDescriptor, items]);

    const onNextPage = React.useCallback(() => {
        if (page < pages) {
            setPage(page + 1);
        }
    }, [page, pages]);

    const onPreviousPage = React.useCallback(() => {
        if (page > 1) {
            setPage(page - 1);
        }
    }, [page]);

    const onRowsPerPageChange = React.useCallback(
        (e: React.ChangeEvent<HTMLSelectElement>) => {
            setRowsPerPage(Number(e.target.value));
            setPage(1);
        },
        []
    );

    const onSearchChange = React.useCallback((value?: string) => {
        if (value) {
            setFilterValue(value);
            setPage(1);
        } else {
            setFilterValue("");
        }
    }, []);

    const onClear = React.useCallback(() => {
        setFilterValue("");
        setPage(1);
    }, []);

    return {
        // State
        filterValue,
        selectedKeys,
        visibleColumns,
        statusFilter,
        rowsPerPage,
        sortDescriptor,
        page,
        hasSearchFilter,

        // Derived state
        headerColumns,
        filteredItems,
        pages,
        items,
        sortedItems,

        // State setters
        setSelectedKeys,
        setVisibleColumns,
        setStatusFilter,
        setSortDescriptor,
        setPage,

        // Handlers
        onNextPage,
        onPreviousPage,
        onRowsPerPageChange,
        onSearchChange,
        onClear,
    };
}

#constants/inventoryTable.ts:
import type { Column, StatusOption, StatusColorMap } from "@/types";

export const columns: Column[] = [
    { name: "DATE", uid: "date", sortable: true },
    { name: "SKU", uid: "sku", sortable: true },
    { name: "PRODUCT NAME", uid: "productName", sortable: true },
    { name: "QTY", uid: "qty", sortable: true },
    { name: "UPDATED QTY", uid: "updatedQty", sortable: true },
    { name: "DIF.", uid: "difference", sortable: true },
    { name: "STATUS", uid: "status", sortable: true },
    { name: "STAFF", uid: "staff", sortable: true },
    { name: "NOTE", uid: "note" },
    { name: "ACTION", uid: "actions" },
];

export const statusOptions: StatusOption[] = [
    { name: "In Stock", uid: "in_stock" },
    { name: "Low Stock", uid: "low_stock" },
    { name: "Out of Stock", uid: "out_of_stock" },
    { name: "Adjustment", uid: "adjustment" },
];

export const statusColorMap: StatusColorMap = {
    in_stock: "success",
    low_stock: "warning",
    out_of_stock: "danger",
    adjustment: "primary",
};

export const INITIAL_VISIBLE_COLUMNS = ["date", "sku", "productName", "qty", "updatedQty", "difference", "status", "staff", "actions"];

#components/InventoryTable/index.ts
export { default } from "./InventoryTable";

#components/InventoryTable/InventoryTable.tsx:
"use client";

import React from "react";
import dynamic from "next/dynamic";

import {
  TableHeader,
  TableColumn,
  TableBody,
  TableRow,
  TableCell,
} from "@heroui/table";

import { Input } from "@heroui/input";
import { Button } from "@heroui/button";
import {
  Dropdown,
  DropdownTrigger,
  DropdownMenu,
  DropdownItem,
} from "@heroui/dropdown";
import { Chip } from "@heroui/chip";
import { Pagination } from "@heroui/pagination";

// Dynamically import Table with SSR disabled
const Table = dynamic(() => import("@heroui/react").then((mod) => mod.Table), {
  ssr: false,
});

import type { Inventory } from "@/types";
import { useInventoryTable } from "@/hooks/useInventoryTable";
import {
  statusColorMap,
  columns,
  statusOptions,
} from "@/constants/inventoryTable";
import { inventoryItems } from "@/data/inventory";
import {
  PlusIcon,
  SearchIcon,
  ChevronDownIcon,
  VerticalDotsIcon,
} from "@/components/icons";

export default function InventoryTable() {
  const {
    filterValue,
    selectedKeys,
    visibleColumns,
    statusFilter,
    sortDescriptor,
    page,
    headerColumns,
    filteredItems,
    pages,
    sortedItems,
    setSelectedKeys,
    setVisibleColumns,
    setStatusFilter,
    setSortDescriptor,
    setPage,
    onRowsPerPageChange,
    onSearchChange,
    onClear,
    onNextPage,
    onPreviousPage,
  } = useInventoryTable();

  const renderCell = React.useCallback(
    (item: Inventory, columnKey: React.Key) => {
      const cellValue = item[columnKey as keyof Inventory];

      switch (columnKey) {
        case "date":
          return <div className="text-sm font-medium">{cellValue}</div>;
        case "sku":
          return (
            <div className="font-mono text-sm font-medium text-blue-600">
              {cellValue}
            </div>
          );
        case "productName":
          return (
            <div className="max-w-xs">
              <p className="text-sm font-medium truncate">{cellValue}</p>
            </div>
          );
        case "qty":
        case "updatedQty":
          return (
            <div className="text-sm font-medium text-center">{cellValue}</div>
          );
        case "difference":
          const diff = cellValue as number;
          return (
            <div
              className={`text-sm font-medium text-center ${
                diff > 0
                  ? "text-green-600"
                  : diff < 0
                    ? "text-red-600"
                    : "text-gray-500"
              }`}
            >
              {diff > 0 ? `+${diff}` : diff}
            </div>
          );
        case "status":
          return (
            <Chip
              className="capitalize"
              color={statusColorMap[item.status]}
              size="sm"
              variant="flat"
            >
              {cellValue === "in_stock"
                ? "In Stock"
                : cellValue === "low_stock"
                  ? "Low Stock"
                  : cellValue === "out_of_stock"
                    ? "Out of Stock"
                    : cellValue === "adjustment"
                      ? "Adjustment"
                      : cellValue}
            </Chip>
          );
        case "staff":
          return (
            <div className="text-sm font-medium text-center">{cellValue}</div>
          );
        case "note":
          return (
            <div className="max-w-xs">
              <p className="text-sm text-gray-600 truncate">{cellValue}</p>
            </div>
          );
        case "actions":
          return (
            <div className="relative flex justify-end items-center gap-2">
              <Dropdown>
                <DropdownTrigger>
                  <Button isIconOnly size="sm" variant="light">
                    <VerticalDotsIcon className="text-default-300" />
                  </Button>
                </DropdownTrigger>
                <DropdownMenu>
                  <DropdownItem key="view">View Details</DropdownItem>
                  <DropdownItem key="edit">Edit Entry</DropdownItem>
                  <DropdownItem key="adjust">Stock Adjust</DropdownItem>
                  <DropdownItem
                    key="delete"
                    className="text-danger"
                    color="danger"
                  >
                    Delete Entry
                  </DropdownItem>
                </DropdownMenu>
              </Dropdown>
            </div>
          );
        default:
          return cellValue;
      }
    },
    []
  );

  const topContent = React.useMemo(() => {
    return (
      <div className="flex flex-col gap-4">
        <div className="flex justify-between gap-3 items-end">
          <Input
            isClearable
            className="w-full sm:max-w-[44%]"
            placeholder="Search by product name or SKU..."
            startContent={<SearchIcon />}
            value={filterValue}
            onClear={() => onClear()}
            onValueChange={onSearchChange}
          />
          <div className="flex gap-3">
            <Dropdown>
              <DropdownTrigger className="hidden sm:flex">
                <Button
                  endContent={<ChevronDownIcon className="text-small" />}
                  variant="flat"
                >
                  Status
                </Button>
              </DropdownTrigger>
              <DropdownMenu
                disallowEmptySelection
                aria-label="Status Filter"
                closeOnSelect={false}
                selectedKeys={statusFilter}
                selectionMode="multiple"
                onSelectionChange={setStatusFilter}
              >
                {statusOptions.map((status) => (
                  <DropdownItem key={status.uid} className="capitalize">
                    {status.name}
                  </DropdownItem>
                ))}
              </DropdownMenu>
            </Dropdown>
            <Dropdown>
              <DropdownTrigger className="hidden sm:flex">
                <Button
                  endContent={<ChevronDownIcon className="text-small" />}
                  variant="flat"
                >
                  Columns
                </Button>
              </DropdownTrigger>
              <DropdownMenu
                disallowEmptySelection
                aria-label="Table Columns"
                closeOnSelect={false}
                selectedKeys={visibleColumns}
                selectionMode="multiple"
                onSelectionChange={setVisibleColumns}
              >
                {columns.map((column) => (
                  <DropdownItem key={column.uid} className="capitalize">
                    {column.name}
                  </DropdownItem>
                ))}
              </DropdownMenu>
            </Dropdown>
            <Button color="primary" endContent={<PlusIcon />}>
              Add Entry
            </Button>
          </div>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-default-400 text-small">
            Total {inventoryItems.length} inventory entries
          </span>
          <label className="flex items-center text-default-400 text-small">
            Rows per page:
            <select
              className="bg-transparent outline-solid outline-transparent text-default-400 text-small"
              onChange={onRowsPerPageChange}
            >
              <option value="5">5</option>
              <option value="10">10</option>
              <option value="15">15</option>
            </select>
          </label>
        </div>
      </div>
    );
  }, [
    filterValue,
    statusFilter,
    visibleColumns,
    onSearchChange,
    onRowsPerPageChange,
    onClear,
    setStatusFilter,
    setVisibleColumns,
  ]);

  const bottomContent = React.useMemo(() => {
    return (
      <div className="py-2 px-2 flex justify-between items-center">
        <span className="w-[30%] text-small text-default-400">
          {selectedKeys === "all"
            ? "All items selected"
            : `${selectedKeys.size} of ${filteredItems.length} selected`}
        </span>
        <Pagination
          isCompact
          showControls
          showShadow
          color="primary"
          page={page}
          total={pages}
          onChange={setPage}
        />
        <div className="hidden sm:flex w-[30%] justify-end gap-2">
          <Button
            isDisabled={pages === 1}
            size="sm"
            variant="flat"
            onPress={onPreviousPage}
          >
            Previous
          </Button>
          <Button
            isDisabled={pages === 1}
            size="sm"
            variant="flat"
            onPress={onNextPage}
          >
            Next
          </Button>
        </div>
      </div>
    );
  }, [
    selectedKeys,
    filteredItems.length,
    page,
    pages,
    onPreviousPage,
    onNextPage,
    setPage,
  ]);

  return (
    <Table
      isHeaderSticky
      aria-label="Stock management table with inventory tracking"
      bottomContent={bottomContent}
      bottomContentPlacement="outside"
      classNames={{
        wrapper: "max-h-[500px]",
      }}
      selectedKeys={selectedKeys}
      selectionMode="multiple"
      sortDescriptor={sortDescriptor}
      topContent={topContent}
      topContentPlacement="outside"
      onSelectionChange={setSelectedKeys}
      onSortChange={setSortDescriptor}
    >
      <TableHeader columns={headerColumns}>
        {(column) => (
          <TableColumn
            key={column.uid}
            align={
              column.uid === "actions"
                ? "center"
                : column.uid === "qty" ||
                    column.uid === "updatedQty" ||
                    column.uid === "difference"
                  ? "center"
                  : "start"
            }
            allowsSorting={column.sortable}
          >
            {column.name}
          </TableColumn>
        )}
      </TableHeader>
      <TableBody
        emptyContent={"No inventory entries found"}
        items={sortedItems}
      >
        {(item) => (
          <TableRow key={item.id}>
            {(columnKey) => (
              <TableCell>{renderCell(item, columnKey)}</TableCell>
            )}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}


#[locale]/test/page.tsx:
"use client";

import InventoryTable from "@/components/InventoryTable";


export default function TestPage() {
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">User Management</h1>
      <InventoryTable />
    </div>
  );
}